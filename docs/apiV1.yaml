openapi: 3.0.0
info:
  title: 'Book&Go Bot'
  version: 1.0.0
paths:
  /api/v1/bookings/:
    get:
      tags:
        - Bookings
      summary: 'Get list of bookings'
      description: 'Retrieves all bookings accessible to current user. Admin users get all bookings.'
      operationId: get_api_v1_bookings_list
      parameters: []
      requestBody: null
      responses:
        '200':
          description: 'List of bookings'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BookingDTO'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
    post:
      tags:
        - Bookings
      summary: 'Create a new booking'
      description: 'Creates a new booking for the authenticated user.'
      operationId: post_api_v1_bookings_add
      parameters: []
      requestBody:
        description: 'Booking data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDTO2'
      responses:
        '201':
          description: 'Booking created successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Booking created!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'House or User not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
  '/api/v1/bookings/{id}':
    get:
      tags:
        - Bookings
      summary: 'Get booking by ID'
      description: 'Retrieves booking details by ID. User can only get their own bookings, admin can get any booking.'
      operationId: get_api_v1_bookings_get_by_id
      parameters:
        -
          name: id
          in: path
          description: 'Booking ID'
          required: true
          schema:
            type: integer
      requestBody: null
      responses:
        '200':
          description: 'Booking information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookingDTO'
        '403':
          description: 'User tries to get other users bookings'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Access denied.' }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'Booking not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
    put:
      tags:
        - Bookings
      summary: 'Replace booking by ID'
      description: 'Replaces booking details by ID. User can only replace their own bookings, admin can replace any booking.'
      operationId: put_api_v1_bookings_replace_by_id
      parameters:
        -
          name: id
          in: path
          description: 'Booking ID'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Booking data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDTO2'
      responses:
        '200':
          description: 'Booking replaced successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Booking replaced!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '403':
          description: 'User tries to replace other users bookings'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Access denied.' }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'House or Booking not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
    delete:
      tags:
        - Bookings
      summary: 'Delete booking by ID'
      description: 'Deletes booking by ID. User can only delete their own bookings, admin can delete any booking.'
      operationId: delete_api_v1_bookings_delete_by_id
      parameters:
        -
          name: id
          in: path
          description: 'Booking ID'
          required: true
          schema:
            type: integer
      requestBody: null
      responses:
        '200':
          description: 'Booking deleted successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Booking deleted!' }
                type: object
        '403':
          description: 'User tries to delete other users bookings'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Access denied.' }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'Booking not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
    patch:
      tags:
        - Bookings
      summary: 'Update booking by ID'
      description: 'Updates booking details by ID. User can only update their own bookings, admin can update any booking.'
      operationId: patch_api_v1_bookings_update_by_id
      parameters:
        -
          name: id
          in: path
          description: 'Booking ID'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Booking data (At least one field of entity is required)'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookingDTO2'
      responses:
        '200':
          description: 'Booking updated successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Booking updated!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '403':
          description: 'User tries to update other users bookings'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Access denied.' }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'Booking or House not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
  /api/v1/cities/:
    get:
      tags:
        - Cities
      summary: 'Get list of cities'
      description: 'Retrieves all cities.'
      operationId: get_api_v1_cities_list
      parameters: []
      requestBody: null
      responses:
        '200':
          description: 'List of cities'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CityDTO'
      security: []
    post:
      tags:
        - Cities
      summary: 'Add a new city'
      description: 'Creates a new city (FOR ADMIN ONLY).'
      operationId: post_api_v1_cities_add
      parameters: []
      requestBody:
        description: 'Booking data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityDTO2'
      responses:
        '201':
          description: 'City created successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'City created!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'Country not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
  '/api/v1/cities/{id}':
    get:
      tags:
        - Cities
      summary: 'Get city by ID'
      description: 'Retrieves city details by ID.'
      operationId: get_api_v1_cities_get_by_id
      parameters:
        -
          name: id
          in: path
          description: 'City ID'
          required: true
          schema:
            type: integer
      requestBody: null
      responses:
        '200':
          description: 'City information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CityDTO'
        '404':
          description: 'City not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
      security: []
    delete:
      tags:
        - Cities
      summary: 'Deletes city by ID'
      description: 'Deletes city details by ID (FOR ADMIN ONLY).'
      operationId: delete_api_v1_cities_delete
      parameters:
        -
          name: id
          in: path
          description: 'City ID'
          required: true
          schema:
            type: integer
      requestBody: null
      responses:
        '200':
          description: 'City deleted successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'City deleted!' }
                type: object
        '400':
          description: 'City has houses'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Cannot delete city that has houses.' }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'City not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
    patch:
      tags:
        - Cities
      summary: 'Update city by ID'
      description: 'Updates city details by ID (FOR ADMIN ONLY).'
      operationId: patch_api_v1_cities_update_by_id
      parameters:
        -
          name: id
          in: path
          description: 'City ID'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'City data (At least one field of entity is required)'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CityDTO2'
      responses:
        '200':
          description: 'City updated successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'City updated!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'City not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
  /api/v1/countries/:
    get:
      tags:
        - Countries
      summary: 'Get list of countries'
      description: 'Retrieves all countries'
      operationId: get_api_v1_countries_list
      parameters: []
      requestBody: null
      responses:
        '200':
          description: 'List of countries'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CountryDTO'
      security: []
    post:
      tags:
        - Countries
      summary: 'Add a new country'
      description: 'Creates a new country (FOR ADMIN ONLY).'
      operationId: post_api_v1_countries_add
      parameters: []
      requestBody:
        description: 'Country data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryDTO2'
      responses:
        '201':
          description: 'Country created successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Country created!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
  '/api/v1/countries/{id}':
    get:
      tags:
        - Countries
      summary: 'Get country by ID'
      description: 'Retrieves country details by ID.'
      operationId: get_api_v1_countries_get_by_id
      parameters:
        -
          name: id
          in: path
          description: 'Country ID'
          required: true
          schema:
            type: integer
      requestBody: null
      responses:
        '200':
          description: 'Country information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CountryDTO'
        '404':
          description: 'Country not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
      security: []
    delete:
      tags:
        - Countries
      summary: 'Deletes country by ID'
      description: 'Deletes country details by ID (FOR ADMIN ONLY).'
      operationId: delete_api_v1_countries_delete
      parameters:
        -
          name: id
          in: path
          description: 'Country ID'
          required: true
          schema:
            type: integer
      requestBody: null
      responses:
        '200':
          description: 'Country deleted successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Country deleted!' }
                type: object
        '400':
          description: 'Country has cities'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Cannot delete country that has cities' }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'Country not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
    patch:
      tags:
        - Countries
      summary: 'Update country by ID'
      description: 'Updates country details by ID (FOR ADMIN ONLY).'
      operationId: patch_api_v1_countries_update_by_id
      parameters:
        -
          name: id
          in: path
          description: 'Country ID'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'Country data (At least one field of entity is required)'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CountryDTO2'
      responses:
        '200':
          description: 'Country updated successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Country updated!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'Country not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
  /api/v1/houses/:
    get:
      tags:
        - Houses
      summary: 'Get list of houses'
      description: 'Retrieves all houses.'
      operationId: get_api_v1_houses_list
      parameters: []
      requestBody: null
      responses:
        '200':
          description: 'List of houses.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HouseDTO'
      security: []
    post:
      tags:
        - Houses
      summary: 'Create a new house'
      description: 'Creates a new house (FOR ADMIN ONLY).'
      operationId: post_api_v1_houses_add
      parameters: []
      requestBody:
        description: 'House data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseDTO2'
      responses:
        '201':
          description: 'House created successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'House created!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'City not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
  '/api/v1/houses/{id}':
    get:
      tags:
        - Houses
      summary: 'Get house by ID'
      description: 'Retrieves house details by ID.'
      operationId: get_api_v1_houses_get_by_id
      parameters:
        -
          name: id
          in: path
          description: 'House ID'
          required: true
          schema:
            type: integer
      requestBody: null
      responses:
        '200':
          description: 'House information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HouseDTO'
        '404':
          description: 'House not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
      security: []
    put:
      tags:
        - Houses
      summary: 'Replace house by ID'
      description: 'Replaces house details by ID (FOR ADMIN ONLY).'
      operationId: put_api_v1_houses_replace_by_id
      parameters:
        -
          name: id
          in: path
          description: 'House ID'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'House data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseDTO2'
      responses:
        '200':
          description: 'House replaced successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'House replaced!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'House not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
    delete:
      tags:
        - Houses
      summary: 'Delete house by ID'
      description: 'Deletes house by ID (FOR ADMIN ONLY).'
      operationId: delete_api_v1_houses_delete
      parameters:
        -
          name: id
          in: path
          description: 'House ID'
          required: true
          schema:
            type: integer
      requestBody: null
      responses:
        '200':
          description: 'House deleted successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'House deleted!' }
                type: object
        '404':
          description: 'House not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
    patch:
      tags:
        - Houses
      summary: 'Update house by ID'
      description: 'Updates house details by ID (FOR ADMIN ONLY).'
      operationId: patch_api_v1_houses_update_by_id
      parameters:
        -
          name: id
          in: path
          description: 'House ID'
          required: true
          schema:
            type: integer
      requestBody:
        description: 'House data (At least one field of entity is required)'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HouseDTO2'
      responses:
        '200':
          description: 'House updated successfully'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'House updated!' }
                type: object
        '400':
          description: 'Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '404':
          description: 'Booking or House not found'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
  /api/v1/users/register:
    post:
      tags:
        - Users
      summary: 'Registration of a new user'
      description: 'Creates a new user with the specified phone number and password'
      operationId: post_api_v1_users_register
      parameters: []
      requestBody:
        description: 'User data'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: 'The user is successfully registered'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'User registered successfully!' }
                type: object
        '400':
          description: 'Validation or Deserialization or Registration error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
      security: []
  /api/v1/users/login:
    post:
      tags:
        - Users
      summary: 'User authorization'
      description: 'Authorizes user and returns JWT tokens'
      operationId: post_api_v1_users_login
      parameters: []
      requestBody:
        description: 'User credentials'
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDTO'
      responses:
        '201':
          description: 'Successful authorization'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Login successful!' }
                  tokens: { properties: { access_token: { type: string }, refresh_token: { type: string } }, type: object }
                type: object
        '400':
          description: 'Validation or Deserialization or Registration error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
      security: []
  /api/v1/users/logout:
    post:
      tags:
        - Users
      summary: 'User logout'
      description: 'User logout and token invalidation'
      operationId: post_api_v1_users_logout
      parameters: []
      requestBody:
        description: 'Refresh token'
        required: true
        content:
          application/json:
            schema:
              properties:
                refresh_token:
                  type: string
              type: object
      responses:
        '200':
          description: 'Successful logout'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Logout successful!' }
                type: object
        '400':
          description: 'Logout or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
      security: []
  /api/v1/users/refresh:
    post:
      tags:
        - Users
      summary: 'Token Refresh'
      description: 'Refresh JWT token using refresh token'
      operationId: post_api_v1_users_refresh
      parameters: []
      requestBody:
        description: 'Refresh token'
        required: true
        content:
          application/json:
            schema:
              properties:
                refresh_token:
                  type: string
              type: object
      responses:
        '201':
          description: 'Token successfully refreshed'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string, example: 'Logout successful!' }
                  tokens: { properties: { access_token: { type: string }, refresh_token: { type: string } }, type: object }
                type: object
        '400':
          description: 'Refresh or Validation or Deserialization error'
          content:
            application/json:
              schema:
                properties:
                  message: { type: string }
                  errors: { type: array, items: { type: string } }
                type: object
      security: []
  /api/v1/users/me:
    get:
      tags:
        - Users
      summary: 'Current user information'
      description: 'Get information about the current authenticated user'
      operationId: get_api_v1_users_me
      parameters: []
      requestBody: null
      responses:
        '200':
          description: 'User information'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDTO2'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                properties:
                  code: { type: integer, example: 401 }
                  message: { type: string, example: 'JWT Token not found' }
                type: object
      security:
        -
          Bearer: []
components:
  schemas:
    BookingDTO:
      required:
        - house_id
        - start_date
        - end_date
      properties:
        id:
          type: integer
          nullable: true
        house_id:
          type: integer
          nullable: true
        comment:
          type: string
          maxLength: 255
          nullable: true
        start_date:
          type: string
          format: date-time
          example: '2025-05-20'
          nullable: true
        end_date:
          type: string
          format: date-time
          example: '2025-06-20'
          nullable: true
        phone_number:
          type: string
          nullable: true
        telegram_chat_id:
          type: integer
          nullable: true
        telegram_user_id:
          type: integer
          nullable: true
        telegram_username:
          type: string
          nullable: true
      type: object
    BookingDTO2:
      required:
        - house_id
        - start_date
        - end_date
      properties:
        house_id:
          type: integer
          nullable: true
        comment:
          type: string
          maxLength: 255
          nullable: true
        start_date:
          type: string
          format: date-time
          example: '2025-05-20'
          nullable: true
        end_date:
          type: string
          format: date-time
          example: '2025-06-20'
          nullable: true
      type: object
    CityDTO:
      required:
        - name
        - country_id
      properties:
        id:
          type: integer
          nullable: true
        name:
          type: string
          maxLength: 100
          nullable: true
        country_id:
          type: integer
          nullable: true
      type: object
    CityDTO2:
      required:
        - name
        - country_id
      properties:
        name:
          type: string
          maxLength: 100
          nullable: true
        country_id:
          type: integer
          nullable: true
      type: object
    CountryDTO:
      required:
        - name
      properties:
        id:
          type: integer
          nullable: true
        name:
          type: string
          maxLength: 100
          nullable: true
      type: object
    CountryDTO2:
      required:
        - name
      properties:
        name:
          type: string
          maxLength: 100
          nullable: true
      type: object
    HouseDTO:
      required:
        - address
        - bedrooms_count
        - price_per_night
        - has_air_conditioning
        - has_wifi
        - has_kitchen
        - has_parking
        - has_sea_view
        - city_id
      properties:
        id:
          type: integer
          nullable: true
        address:
          type: string
          maxLength: 255
          nullable: true
        bedrooms_count:
          type: integer
          maximum: 20
          minimum: 1
          nullable: true
        price_per_night:
          type: integer
          maximum: 100000
          minimum: 100
          nullable: true
        has_air_conditioning:
          type: boolean
          nullable: true
        has_wifi:
          type: boolean
          nullable: true
        has_kitchen:
          type: boolean
          nullable: true
        has_parking:
          type: boolean
          nullable: true
        has_sea_view:
          type: boolean
          nullable: true
        city_id:
          type: integer
          nullable: true
        image_url:
          type: string
          nullable: true
      type: object
    HouseDTO2:
      required:
        - address
        - bedrooms_count
        - price_per_night
        - has_air_conditioning
        - has_wifi
        - has_kitchen
        - has_parking
        - has_sea_view
        - city_id
      properties:
        address:
          type: string
          maxLength: 255
          nullable: true
        bedrooms_count:
          type: integer
          maximum: 20
          minimum: 1
          nullable: true
        price_per_night:
          type: integer
          maximum: 100000
          minimum: 100
          nullable: true
        has_air_conditioning:
          type: boolean
          nullable: true
        has_wifi:
          type: boolean
          nullable: true
        has_kitchen:
          type: boolean
          nullable: true
        has_parking:
          type: boolean
          nullable: true
        has_sea_view:
          type: boolean
          nullable: true
        city_id:
          type: integer
          nullable: true
        image_url:
          type: string
          nullable: true
      type: object
    UserDTO:
      required:
        - phone_number
        - password
      properties:
        phone_number:
          type: string
          maxLength: 15
          minLength: 7
          pattern: '\+(?:[0-9]{1,3})(?:[0-9]{7,14})'
          nullable: true
        password:
          type: string
          nullable: true
      type: object
    UserDTO2:
      required:
        - phone_number
      properties:
        phone_number:
          type: string
          maxLength: 15
          minLength: 7
          pattern: '\+(?:[0-9]{1,3})(?:[0-9]{7,14})'
          nullable: true
        roles:
          type: array
          items: {  }
          default:
            - ROLE_USER
        telegram_chat_id:
          type: integer
          nullable: true
        telegram_user_id:
          type: integer
          nullable: true
        telegram_username:
          type: string
          nullable: true
      type: object
  securitySchemes:
    Bearer:
      type: http
      description: 'Enter JWT access token'
      bearerFormat: JWT
      scheme: bearer
tags:
  -
    name: Bookings
    description: Bookings
  -
    name: Cities
    description: Cities
  -
    name: Countries
    description: Countries
  -
    name: Houses
    description: Houses
  -
    name: Users
    description: Users

